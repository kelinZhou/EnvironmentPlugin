apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: "com.kelin.environment"


environment {
    //当打生产包时将该参数改为true，那么所生成的EnvConfig类中就不会包含releaseEnv以外的内容，避免开发、测试等环境泄漏。
    online false

    //配置初始化环境(应用首次安装到设备上的默认环境)，改参数也是用来配置manifestPlaceholders的环境的。
    initEnvironment release

    //当release的值为false时的包配置。
    devConfig {
        appIcon "@mipmap/ic_android"
        appRoundIcon "@mipmap/ic_android"
        appName "EnvPlugin"
//        versionCode 100
        versionName "1.0.0"
        applicationId "${packageName}.test"
        variables ARG1:"1212", ARG2:"我很好"
    }

    //当release的值为true时的包配置。
    releaseConfig {
        appIcon "@mipmap/ic_launcher"
        appRoundIcon "@mipmap/ic_launcher"
        appName "@string/app_name"
//        versionCode 200
        versionName "2.0.0"
        applicationId packageName
        variables ARG1:"1212上线", ARG2:"我很好上线"
    }

    releaseEnv {
        alias "生产"

        variable "API_HOST", "192.168.31.24"
        variable "API_PORT", "8443"
        variable "UM_APP_KEY", '7c2ed9f7f1d5ecccc', true
        variable "WX_APP_ID", "wxc23iadfaioaiuu0a"
        variable "WX_APP_SECRET", "ioa9ad9887ad98ay979ad86"
    }

    devEnv {
        alias "开发"

        variable "API_HOST", "192.168.30.11"
        variable "API_PORT", "8016"
        variable "UM_APP_KEY", '7c2ed9f7f1d5eefff'
    }

    testEnv {
        alias "测试"

        variable "API_HOST", "192.168.36.18"
        variable "API_PORT", "8001"
        variable "UM_APP_KEY", '7c2ed9f7f1d5eebbb'
    }

    demoEnv {
        alias "预发"

        variable "API_HOST", "192.168.36.10"
        variable "API_PORT", "8109"
        variable "UM_APP_KEY", '7c2ed9f7f1d5eeaaa'
    }
}

android {

    compileSdkVersion 28
    defaultConfig {
        versionCode environment.versionCode
        versionName environment.versionName
        applicationId environment.applicationId
        minSdkVersion 14
        targetSdkVersion 28
        println("=========${environment.variables}")
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias 'kelinZhou'
            keyPassword '881219'
            storeFile file('../kelin.jks')
            storePassword '881219'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    //支持多渠道配置。
    flavorDimensions "default"
    productFlavors {
        for (channel in file('./channels')) {
            if (channel != null && channel.length() > 0 && !channel.startsWith("//")) {
                "$channel-$packageName" {
                    //JPush的固定字段
                    manifestPlaceholders = ["JPUSH_PKGNAME": packageName, "JPUSH_CHANNEL": channel]
                    buildConfigField 'String', 'UM_CHANNEL', "\"$channel\""
                    dimension "default"
                }
                if (!environment.release) {
                    break
                }
            }
        }
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
